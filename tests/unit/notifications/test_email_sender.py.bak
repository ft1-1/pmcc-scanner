"""
Unit tests for email sender.
"""

import pytest
from unittest.mock import Mock, patch, MagicMock

from src.notifications.email_sender import EmailSender
from src.notifications.models import NotificationTemplate, NotificationChannel, NotificationStatus
from python_http_client.exceptions import HTTPError


@pytest.fixture
def mock_sendgrid_client():
    """Mock SendGrid client."""
    mock_client = Mock()
    mock_response = Mock()
    mock_response.status_code = 202
    mock_response.headers = {'X-Message-Id': 'test_message_id'}
    mock_client.send.return_value = mock_response
    return mock_client


@pytest.fixture
def email_sender():
    """Create email sender with mock credentials."""
    with patch.dict('os.environ', {
        'SENDGRID_API_KEY': 'test_api_key',
        'EMAIL_FROM': 'pmcc-scanner@example.com'
    }):
        with patch('src.notifications.email_sender.SendGridAPIClient'):
            return EmailSender()


@pytest.fixture
def sample_template():
    """Sample email template."""
    return NotificationTemplate(
        subject="PMCC Opportunity Alert: AAPL",
        text_content="PMCC opportunity found for AAPL at $155.00",
        html_content="<h1>PMCC Opportunity</h1><p>AAPL at $155.00</p>"
    )


class TestEmailSender:
    """Test email sender functionality."""
    
    def test_initialization_success(self):
        """Test successful initialization."""
        with patch.dict('os.environ', {
            'SENDGRID_API_KEY': 'test_key',
            'EMAIL_FROM': 'test@example.com'
        }):
            with patch('src.notifications.email_sender.SendGridAPIClient') as mock_client:
                sender = EmailSender()
                assert sender.api_key == 'test_key'
                assert sender.from_email == 'test@example.com'
                mock_client.assert_called_once_with(api_key='test_key')
    
    def test_initialization_missing_api_key(self):
        """Test initialization fails with missing API key."""
        with patch.dict('os.environ', {}, clear=True):
            with pytest.raises(ValueError, match="SendGrid API key not found"):
                EmailSender()
    
    def test_send_email_success(self, email_sender, sample_template, mock_sendgrid_client):
        """Test successful email sending."""
        email_sender.client = mock_sendgrid_client
        
        result = email_sender.send_email("test@example.com", sample_template)
        
        assert result.channel == NotificationChannel.EMAIL
        assert result.status == NotificationStatus.SENT
        assert result.recipient == "test@example.com"
        assert result.message_id == "test_message_id"
        assert result.sent_at is not None
        
        mock_sendgrid_client.send.assert_called_once()
    
    def test_send_email_http_error_retryable(self, email_sender, sample_template):
        """Test handling of retryable HTTP errors."""
        mock_client = Mock()
        http_error = HTTPError()
        http_error.status_code = 429
        http_error.body = "Rate limit exceeded"
        mock_client.send.side_effect = http_error
        email_sender.client = mock_client
        
        result = email_sender.send_email("test@example.com", sample_template)
        
        assert result.channel == NotificationChannel.EMAIL
        assert result.status == NotificationStatus.RETRYING
        assert result.recipient == "test@example.com"
        assert "429" in result.error_message
    
    def test_send_email_http_error_permanent(self, email_sender, sample_template):
        """Test handling of permanent HTTP errors."""
        mock_client = Mock()
        http_error = HTTPError()
        http_error.status_code = 400
        http_error.body = "Invalid email address"
        mock_client.send.side_effect = http_error
        email_sender.client = mock_client
        
        result = email_sender.send_email("test@example.com", sample_template)
        
        assert result.status == NotificationStatus.FAILED
        assert "400" in result.error_message
    
    def test_send_email_unexpected_error(self, email_sender, sample_template):
        """Test handling of unexpected errors."""
        mock_client = Mock()
        mock_client.send.side_effect = Exception("Network error")
        email_sender.client = mock_client
        
        result = email_sender.send_email("test@example.com", sample_template)
        
        assert result.status == NotificationStatus.FAILED
        assert "Network error" in result.error_message
    
    def test_send_bulk_emails_single_recipient(self, email_sender, sample_template, mock_sendgrid_client):
        """Test bulk email with single recipient falls back to single send."""
        email_sender.client = mock_sendgrid_client
        
        recipients = ["test@example.com"]
        results = email_sender.send_bulk_emails(recipients, sample_template)
        
        assert len(results) == 1
        assert results[0].is_success
        mock_sendgrid_client.send.assert_called_once()
    
    def test_send_bulk_emails_multiple_recipients(self, email_sender, sample_template, mock_sendgrid_client):
        """Test bulk email with multiple recipients."""
        email_sender.client = mock_sendgrid_client
        
        recipients = ["test1@example.com", "test2@example.com", "test3@example.com"]
        results = email_sender.send_bulk_emails(recipients, sample_template)
        
        assert len(results) == 3
        assert all(r.is_success for r in results)
        mock_sendgrid_client.send.assert_called_once()
    
    def test_send_bulk_emails_error(self, email_sender, sample_template):
        """Test bulk email error handling."""
        mock_client = Mock()
        http_error = HTTPError()
        http_error.status_code = 500
        http_error.body = "Server error"
        mock_client.send.side_effect = http_error
        email_sender.client = mock_client
        
        recipients = ["test1@example.com", "test2@example.com"]
        results = email_sender.send_bulk_emails(recipients, sample_template)
        
        assert len(results) == 2
        assert all(r.status == NotificationStatus.RETRYING for r in results)
        assert all("Server error" in r.error_message for r in results)
    
    def test_validate_email_valid(self, email_sender):
        """Test email validation with valid addresses."""
        valid_emails = [
            "test@example.com",
            "user.name+tag@domain.co.uk",
            "123@test-domain.org"
        ]
        
        for email in valid_emails:
            assert email_sender.validate_email(email) is True
    
    def test_validate_email_invalid(self, email_sender):
        """Test email validation with invalid addresses."""
        invalid_emails = [
            "invalid_email",
            "@domain.com",
            "test@",
            "test.domain.com",
            ""
        ]
        
        for email in invalid_emails:
            assert email_sender.validate_email(email) is False
    
    def test_parse_recipient_list(self):
        """Test parsing recipient list."""
        recipients_str = "test1@example.com, test2@example.com , invalid_email, test3@domain.org"
        
        with patch.dict('os.environ', {
            'SENDGRID_API_KEY': 'test_key'
        }):
            recipients = EmailSender.parse_recipient_list(recipients_str)
        
        assert len(recipients) == 3
        assert "test1@example.com" in recipients
        assert "test2@example.com" in recipients
        assert "test3@domain.org" in recipients
        assert "invalid_email" not in recipients
    
    def test_parse_recipient_list_empty(self):
        """Test parsing empty recipient list."""
        with patch.dict('os.environ', {
            'SENDGRID_API_KEY': 'test_key'
        }):
            recipients = EmailSender.parse_recipient_list("")
        
        assert recipients == []
    
    def test_create_html_template(self, email_sender):
        """Test HTML template creation."""
        opportunities = [
            {
                'symbol': 'AAPL',
                'underlying_price': 155.00,
                'net_debit': 22.25,
                'max_profit': 7.75,
                'total_score': 85,
                'long_call': {
                    'strike': 150.00,
                    'expiration': '2025-01-17'
                },
                'short_call': {
                    'strike': 160.00,
                    'expiration': '2024-12-20'
                }
            }
        ]
        
        html = email_sender.create_html_template(opportunities)
        
        assert "AAPL" in html
        assert "$155.00" in html
        assert "$22.25" in html
        assert "$7.75" in html
        assert "85/100" in html
        assert "DOCTYPE html" in html
    
    def test_is_email_enabled_true(self):
        """Test email enabled check when enabled."""
        with patch.dict('os.environ', {
            'EMAIL_ENABLED': 'true',
            'SENDGRID_API_KEY': 'test_key'
        }):
            with patch('src.notifications.email_sender.SendGridAPIClient'):
                sender = EmailSender()
                assert sender.is_email_enabled() is True
    
    def test_is_email_enabled_false(self):
        """Test email enabled check when disabled."""
        with patch.dict('os.environ', {
            'EMAIL_ENABLED': 'false',
            'SENDGRID_API_KEY': 'test_key'
        }):
            with patch('src.notifications.email_sender.SendGridAPIClient'):
                sender = EmailSender()
                assert sender.is_email_enabled() is False
    
    def test_rate_limiting(self, email_sender, sample_template):
        """Test rate limiting functionality."""
        mock_client = Mock()
        mock_response = Mock()
        mock_response.status_code = 202
        mock_client.send.return_value = mock_response
        email_sender.client = mock_client
        
        with patch('time.time', side_effect=[0, 0.05, 0.15, 0.25]) as mock_time, \
             patch('time.sleep') as mock_sleep:
            
            # First email should not trigger rate limit (10 msgs/sec = 0.1s interval)
            email_sender.send_email("test@example.com", sample_template)
            mock_sleep.assert_not_called()
            
            # Second email should trigger rate limit
            email_sender.send_email("test@example.com", sample_template)
            mock_sleep.assert_called_once()
    
    def test_get_account_info(self, email_sender):
        """Test getting account information."""
        mock_client = Mock()
        mock_response = Mock()
        mock_response.status_code = 200
        mock_client.stats.get.return_value = mock_response
        email_sender.client = mock_client
        
        account_info = email_sender.get_account_info()
        
        assert account_info is not None
        assert account_info["api_key_valid"] is True
        assert account_info["stats_available"] is True
    
    def test_check_delivery_status_placeholder(self, email_sender):
        """Test delivery status check placeholder."""
        # This is a placeholder since SendGrid doesn't provide direct status check
        status = email_sender.check_delivery_status("test_message_id")
        assert status == NotificationStatus.SENT