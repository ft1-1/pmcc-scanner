#!/bin/bash
# Setup script for cron-based scheduling of PMCC Scanner.
#
# Alternative to systemd for systems that prefer cron scheduling.
# Creates cron jobs and wrapper scripts for reliable execution.

set -euo pipefail

# Configuration
USER="${PMCC_USER:-$(whoami)}"
PROJECT_ROOT="${PMCC_PROJECT_ROOT:-$(pwd)}"
PYTHON_PATH="${PMCC_PYTHON_PATH:-$(which python3)}"
SCAN_TIME="${PMCC_SCAN_TIME:-30 9}"  # minute hour format
LOG_LEVEL="${PMCC_LOG_LEVEL:-INFO}"
ENVIRONMENT="${PMCC_ENVIRONMENT:-production}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    # Check if project directory exists
    if [[ ! -d "$PROJECT_ROOT" ]]; then
        log_error "Project directory $PROJECT_ROOT does not exist"
        exit 1
    fi
    
    if [[ ! -f "$PROJECT_ROOT/scripts/run_daily_scan.py" ]]; then
        log_error "PMCC Scanner scripts not found in $PROJECT_ROOT"
        exit 1
    fi
    
    # Check Python
    if [[ ! -x "$PYTHON_PATH" ]]; then
        log_error "Python not found at $PYTHON_PATH"
        exit 1
    fi
    
    # Check cron daemon
    if ! command -v crontab &> /dev/null; then
        log_error "crontab command not found. Please install cron."
        exit 1
    fi
    
    log_info "Prerequisites check passed"
}

# Create wrapper script for cron execution
create_cron_wrapper() {
    local wrapper_script="$PROJECT_ROOT/scripts/cron_wrapper.sh"
    
    log_info "Creating cron wrapper script..."
    
    cat > "$wrapper_script" << EOF
#!/bin/bash
# PMCC Scanner cron wrapper script
# Generated by setup_cron.sh

# Exit on any error
set -e

# Configuration
PROJECT_ROOT="$PROJECT_ROOT"
PYTHON_PATH="$PYTHON_PATH"
LOG_LEVEL="$LOG_LEVEL"
ENVIRONMENT="$ENVIRONMENT"

# Change to project directory
cd "\$PROJECT_ROOT"

# Set environment variables
export PYTHONPATH="\$PROJECT_ROOT/src"
export LOG_LEVEL="\$LOG_LEVEL"
export ENVIRONMENT="\$ENVIRONMENT"

# Load environment file if it exists
if [[ -f "\$PROJECT_ROOT/.env" ]]; then
    set -a
    source "\$PROJECT_ROOT/.env"
    set +a
fi

if [[ -f "\$PROJECT_ROOT/.env.\$ENVIRONMENT" ]]; then
    set -a
    source "\$PROJECT_ROOT/.env.\$ENVIRONMENT"
    set +a
fi

# Ensure log directory exists
mkdir -p "\$PROJECT_ROOT/logs"

# Create lock file directory
mkdir -p "\$PROJECT_ROOT/tmp"

# Run the daily scan with timeout
timeout 3600 "\$PYTHON_PATH" "\$PROJECT_ROOT/scripts/run_daily_scan.py" 2>&1

# Exit with the same code as the scan script
exit \$?
EOF

    chmod +x "$wrapper_script"
    log_info "Created cron wrapper: $wrapper_script"
}

# Create health check wrapper
create_health_wrapper() {
    local health_script="$PROJECT_ROOT/scripts/cron_health_check.sh"
    
    log_info "Creating health check wrapper..."
    
    cat > "$health_script" << EOF
#!/bin/bash
# PMCC Scanner health check wrapper for cron
# Generated by setup_cron.sh

# Configuration
PROJECT_ROOT="$PROJECT_ROOT"
PYTHON_PATH="$PYTHON_PATH"

# Change to project directory
cd "\$PROJECT_ROOT"

# Set environment variables
export PYTHONPATH="\$PROJECT_ROOT/src"

# Load environment file if it exists
if [[ -f "\$PROJECT_ROOT/.env" ]]; then
    set -a
    source "\$PROJECT_ROOT/.env"
    set +a
fi

if [[ -f "\$PROJECT_ROOT/.env.$ENVIRONMENT" ]]; then
    set -a
    source "\$PROJECT_ROOT/.env.\$ENVIRONMENT"
    set +a
fi

# Run health check
"\$PYTHON_PATH" "\$PROJECT_ROOT/scripts/health_check.py" --json > "\$PROJECT_ROOT/tmp/last_health_check.json" 2>&1

# Store exit code
echo \$? > "\$PROJECT_ROOT/tmp/last_health_check_exit_code"

# Also create a simple status file with timestamp
if [[ \$? -eq 0 ]]; then
    echo "HEALTHY \$(date)" > "\$PROJECT_ROOT/tmp/health_status"
else
    echo "UNHEALTHY \$(date)" > "\$PROJECT_ROOT/tmp/health_status"
fi
EOF

    chmod +x "$health_script"
    log_info "Created health check wrapper: $health_script"
}

# Create monitoring script
create_monitoring_script() {
    local monitor_script="$PROJECT_ROOT/scripts/cron_monitor.sh"
    
    log_info "Creating monitoring script..."
    
    cat > "$monitor_script" << 'EOF'
#!/bin/bash
# PMCC Scanner monitoring script for cron deployment

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

show_status() {
    echo "=== PMCC Scanner Status ==="
    
    # Check if cron job exists
    if crontab -l 2>/dev/null | grep -q "pmcc.*daily.*scan"; then
        echo "✅ Cron job: Installed"
    else
        echo "❌ Cron job: Not found"
    fi
    
    # Check last run
    if [[ -f "$PROJECT_ROOT/data/run_metadata/latest_run.json" ]]; then
        local last_run=$(jq -r '.timestamp' "$PROJECT_ROOT/data/run_metadata/latest_run.json" 2>/dev/null || echo "unknown")
        local success=$(jq -r '.success' "$PROJECT_ROOT/data/run_metadata/latest_run.json" 2>/dev/null || echo "false")
        
        if [[ "$success" == "true" ]]; then
            echo "✅ Last run: $last_run (SUCCESS)"
        else
            echo "❌ Last run: $last_run (FAILED)"
        fi
    else
        echo "⚠️  Last run: No data available"
    fi
    
    # Check health
    if [[ -f "$PROJECT_ROOT/tmp/health_status" ]]; then
        cat "$PROJECT_ROOT/tmp/health_status"
    else
        echo "⚠️  Health: No data available"
    fi
    
    # Check lock file
    if [[ -f "$PROJECT_ROOT/tmp/daily_scan.lock" ]]; then
        local lock_pid=$(cat "$PROJECT_ROOT/tmp/daily_scan.lock" 2>/dev/null || echo "unknown")
        if kill -0 "$lock_pid" 2>/dev/null; then
            echo "🔄 Status: Scan currently running (PID: $lock_pid)"
        else
            echo "⚠️  Status: Stale lock file detected"
        fi
    else
        echo "⏹️  Status: No scan currently running"
    fi
}

show_logs() {
    echo "=== Recent Scan Logs ==="
    if [[ -f "$PROJECT_ROOT/logs/daily_scan.log" ]]; then
        tail -50 "$PROJECT_ROOT/logs/daily_scan.log"
    else
        echo "No scan logs found"
    fi
}

show_health() {
    echo "=== Health Check ==="
    if [[ -f "$PROJECT_ROOT/tmp/last_health_check.json" ]]; then
        cat "$PROJECT_ROOT/tmp/last_health_check.json" | jq . 2>/dev/null || cat "$PROJECT_ROOT/tmp/last_health_check.json"
    else
        echo "Running health check..."
        "$PROJECT_ROOT/scripts/cron_health_check.sh"
        if [[ -f "$PROJECT_ROOT/tmp/last_health_check.json" ]]; then
            cat "$PROJECT_ROOT/tmp/last_health_check.json" | jq . 2>/dev/null || cat "$PROJECT_ROOT/tmp/last_health_check.json"
        fi
    fi
}

run_scan() {
    echo "Running manual scan..."
    "$PROJECT_ROOT/scripts/cron_wrapper.sh"
    echo "Scan completed. Check logs for details."
}

install_cron() {
    local scan_minute="${PMCC_SCAN_MINUTE:-30}"
    local scan_hour="${PMCC_SCAN_HOUR:-9}"
    
    echo "Installing cron job for daily scans..."
    
    # Create temporary crontab
    local temp_cron=$(mktemp)
    
    # Get existing crontab (ignore errors if empty)
    crontab -l 2>/dev/null > "$temp_cron" || true
    
    # Remove any existing PMCC Scanner entries
    grep -v "pmcc.*daily.*scan" "$temp_cron" > "${temp_cron}.new" || true
    mv "${temp_cron}.new" "$temp_cron"
    
    # Add new cron job (Monday-Friday)
    echo "$scan_minute $scan_hour * * 1-5 $PROJECT_ROOT/scripts/cron_wrapper.sh # PMCC Scanner daily scan" >> "$temp_cron"
    
    # Add health check (every 6 hours)
    echo "0 */6 * * * $PROJECT_ROOT/scripts/cron_health_check.sh # PMCC Scanner health check" >> "$temp_cron"
    
    # Install new crontab
    crontab "$temp_cron"
    rm "$temp_cron"
    
    echo "✅ Cron jobs installed:"
    echo "   Daily scan: $scan_minute $scan_hour * * 1-5 (Monday-Friday)"
    echo "   Health check: Every 6 hours"
}

remove_cron() {
    echo "Removing PMCC Scanner cron jobs..."
    
    # Create temporary crontab
    local temp_cron=$(mktemp)
    
    # Get existing crontab
    if crontab -l 2>/dev/null > "$temp_cron"; then
        # Remove PMCC Scanner entries
        grep -v "pmcc.*daily.*scan\|PMCC.*Scanner" "$temp_cron" > "${temp_cron}.new" || true
        
        # Install updated crontab
        if [[ -s "${temp_cron}.new" ]]; then
            crontab "${temp_cron}.new"
            echo "✅ PMCC Scanner cron jobs removed"
        else
            crontab -r
            echo "✅ All cron jobs removed (crontab was empty)"
        fi
        
        rm "${temp_cron}.new"
    else
        echo "No existing crontab found"
    fi
    
    rm "$temp_cron"
}

case "${1:-status}" in
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    health)
        show_health
        ;;
    run-scan)
        run_scan
        ;;
    install-cron)
        install_cron
        ;;
    remove-cron)
        remove_cron
        ;;
    *)
        echo "Usage: $0 {status|logs|health|run-scan|install-cron|remove-cron}"
        echo ""
        echo "Commands:"
        echo "  status      - Show current status"
        echo "  logs        - Show recent logs"
        echo "  health      - Run health check"
        echo "  run-scan    - Run manual scan"
        echo "  install-cron - Install cron jobs"
        echo "  remove-cron  - Remove cron jobs"
        exit 1
        ;;
esac
EOF

    chmod +x "$monitor_script"
    log_info "Created monitoring script: $monitor_script"
}

# Install cron jobs
install_cron_jobs() {
    local scan_minute="${PMCC_SCAN_TIME% *}"  # Extract minute
    local scan_hour="${PMCC_SCAN_TIME#* }"   # Extract hour
    
    log_info "Installing cron jobs..."
    log_info "Scan schedule: $scan_minute $scan_hour * * 1-5 (Monday-Friday)"
    
    # Create temporary crontab file
    local temp_cron=$(mktemp)
    
    # Get existing crontab (ignore errors if empty)
    crontab -l 2>/dev/null > "$temp_cron" || true
    
    # Remove any existing PMCC Scanner entries
    grep -v "pmcc.*daily.*scan\|PMCC.*Scanner" "$temp_cron" > "${temp_cron}.new" 2>/dev/null || touch "${temp_cron}.new"
    mv "${temp_cron}.new" "$temp_cron"
    
    # Add new cron jobs
    echo "# PMCC Scanner cron jobs (generated by setup_cron.sh)" >> "$temp_cron"
    echo "$scan_minute $scan_hour * * 1-5 $PROJECT_ROOT/scripts/cron_wrapper.sh # PMCC Scanner daily scan" >> "$temp_cron"
    echo "0 */6 * * * $PROJECT_ROOT/scripts/cron_health_check.sh # PMCC Scanner health check" >> "$temp_cron"
    echo "" >> "$temp_cron"
    
    # Install new crontab
    crontab "$temp_cron"
    rm "$temp_cron"
    
    log_info "Cron jobs installed successfully"
    
    # Show installed jobs
    log_info "Installed cron jobs:"
    crontab -l | grep -E "pmcc|PMCC" || log_warn "No PMCC Scanner cron jobs found after installation"
}

# Create environment file template
create_env_template() {
    local env_file="$PROJECT_ROOT/.env.production"
    
    if [[ ! -f "$env_file" ]]; then
        log_info "Creating environment file template..."
        
        cat > "$env_file" << EOF
# PMCC Scanner Production Configuration
ENVIRONMENT=production

# MarketData API Configuration
MARKETDATA_API_TOKEN=your_api_token_here
MARKETDATA_BASE_URL=https://api.marketdata.app
MARKETDATA_TIMEOUT_SECONDS=30

# Notification Configuration
NOTIFICATION_WHATSAPP_ENABLED=true
NOTIFICATION_EMAIL_ENABLED=true

# Twilio/WhatsApp Settings
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_whatsapp_number
WHATSAPP_TO_NUMBERS=+1234567890

# Mailgun/Email Settings (preferred)
MAILGUN_API_KEY=your_mailgun_api_key
MAILGUN_DOMAIN=your_mailgun_domain.com
EMAIL_FROM=scanner@yourdomain.com
EMAIL_TO=alerts@yourdomain.com

# SendGrid/Email Settings (backward compatibility - deprecated)
# SENDGRID_API_KEY=your_sendgrid_api_key

# Scan Configuration
SCAN_TIME=09:30
SCAN_TIMEZONE=US/Eastern

# Logging Configuration
LOG_LEVEL=INFO
LOG_ENABLE_FILE_LOGGING=true
LOG_FILE=$PROJECT_ROOT/logs/pmcc_scanner.log
EOF

        chmod 600 "$env_file"
        
        log_warn "Created environment template: $env_file"
        log_warn "Please edit this file with your actual configuration values!"
    else
        log_info "Environment file already exists: $env_file"
    fi
}

# Set up directory structure
setup_directories() {
    log_info "Setting up directory structure..."
    
    # Create required directories
    mkdir -p "$PROJECT_ROOT"/{logs,data,tmp}
    mkdir -p "$PROJECT_ROOT/data/run_metadata"
    
    # Set permissions
    chmod 755 "$PROJECT_ROOT"/{logs,data,tmp}
    chmod 755 "$PROJECT_ROOT/data/run_metadata"
    
    log_info "Directory structure created"
}

# Create logrotate configuration
setup_logrotate() {
    if command -v logrotate &> /dev/null && [[ -w /etc/logrotate.d ]] 2>/dev/null; then
        log_info "Setting up log rotation..."
        
        sudo tee "/etc/logrotate.d/pmcc-scanner" > /dev/null << EOF
$PROJECT_ROOT/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 0644 $USER $USER
}
EOF
        
        log_info "Log rotation configured"
    else
        log_warn "Could not set up log rotation (logrotate not available or no permissions)"
    fi
}

# Main execution
main() {
    log_info "Setting up PMCC Scanner with cron scheduling..."
    log_info "Project root: $PROJECT_ROOT"
    log_info "User: $USER"
    log_info "Python: $PYTHON_PATH"
    log_info "Scan time: $SCAN_TIME"
    
    check_prerequisites
    setup_directories
    create_cron_wrapper
    create_health_wrapper
    create_monitoring_script
    create_env_template
    
    if [[ "${SKIP_CRON_INSTALL:-false}" != "true" ]]; then
        install_cron_jobs
    fi
    
    setup_logrotate
    
    log_info ""
    log_info "🎉 PMCC Scanner cron setup complete!"
    log_info ""
    log_info "Next steps:"
    log_info "1. Edit $PROJECT_ROOT/.env.production with your configuration"
    log_info "2. Test the setup: $PROJECT_ROOT/scripts/cron_monitor.sh run-scan"
    log_info "3. Monitor with: $PROJECT_ROOT/scripts/cron_monitor.sh status"
    log_info ""
    log_info "The scanner will run Monday-Friday at $SCAN_TIME"
    log_info "Health checks will run every 6 hours"
    log_info ""
    log_info "Available commands:"
    log_info "  Monitor status:  $PROJECT_ROOT/scripts/cron_monitor.sh status"
    log_info "  View logs:       $PROJECT_ROOT/scripts/cron_monitor.sh logs"
    log_info "  Run health check: $PROJECT_ROOT/scripts/cron_monitor.sh health"
    log_info "  Manual scan:     $PROJECT_ROOT/scripts/cron_monitor.sh run-scan"
}

# Run main function
main "$@"